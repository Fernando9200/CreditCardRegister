{"ast":null,"code":"//Data Layer\nexport class CreditCardAPI {\n  async fetchCreditCardList() {\n    const apiData = [{\n      id: 'ff646567-484e-4eb7-961f-977f7c728eb9',\n      cardNumber: '1111111111111111',\n      cardHolder: 'Hassan Saeed',\n      cardMonth: '01',\n      cardYear: '2023',\n      cardCvv: '1111'\n    }, {\n      id: 'b8262cc8-6506-46f2-925a-819729b224ec',\n      cardNumber: '2222222222222222',\n      cardHolder: 'John Doe',\n      cardMonth: '02',\n      cardYear: '2024',\n      cardCvv: '2222'\n    }];\n    let creditCardsList = []; //first check local storage if local storage is empty then add api mock data as seed\n\n    if (localStorage.getItem('cards')) {\n      var _localStorage$getItem;\n\n      const localStorageData = JSON.parse((_localStorage$getItem = localStorage.getItem('cards')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '');\n      creditCardsList = [...localStorageData];\n    } else {\n      creditCardsList = [...apiData];\n      updateLocalStorageCards(creditCardsList);\n    }\n\n    return creditCardsList; //TODO:integrate API module when got API from backend team :)\n\n    /*\n    private readonly api = new Api();//it will have all Restful verbs functions\n    return axios.get(`ENDPOINT_GOES_HERE`)\n    .then((res: { data: any; }) => {\n      return res.data;\n    });\n    */\n  }\n\n} //CreditCardAPI Class End\n//Business Layer\n\nexport async function fetchCreditCardList() {\n  const api = new CreditCardAPI();\n  return api.fetchCreditCardList();\n}\nexport function updateLocalStorageCards(cards) {\n  localStorage.setItem('cards', JSON.stringify(cards));\n}","map":{"version":3,"sources":["/home/fernando/credit-card-register/src/CardManager/CreditCard.ts"],"names":["CreditCardAPI","fetchCreditCardList","apiData","id","cardNumber","cardHolder","cardMonth","cardYear","cardCvv","creditCardsList","localStorage","getItem","localStorageData","JSON","parse","updateLocalStorageCards","api","cards","setItem","stringify"],"mappings":"AAYA;AACA,OAAO,MAAMA,aAAN,CAAoB;AACA,QAAnBC,mBAAmB,GAA0B;AACjD,UAAMC,OAAqB,GAAG,CAC5B;AACEC,MAAAA,EAAE,EAAE,sCADN;AAEEC,MAAAA,UAAU,EAAE,kBAFd;AAGEC,MAAAA,UAAU,EAAE,cAHd;AAIEC,MAAAA,SAAS,EAAE,IAJb;AAKEC,MAAAA,QAAQ,EAAE,MALZ;AAMEC,MAAAA,OAAO,EAAE;AANX,KAD4B,EAS5B;AACEL,MAAAA,EAAE,EAAE,sCADN;AAEEC,MAAAA,UAAU,EAAE,kBAFd;AAGEC,MAAAA,UAAU,EAAE,UAHd;AAIEC,MAAAA,SAAS,EAAE,IAJb;AAKEC,MAAAA,QAAQ,EAAE,MALZ;AAMEC,MAAAA,OAAO,EAAE;AANX,KAT4B,CAA9B;AAkBA,QAAIC,eAA6B,GAAG,EAApC,CAnBiD,CAoBjD;;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AAAA;;AACjC,YAAMC,gBAA8B,GAAGC,IAAI,CAACC,KAAL,0BACrCJ,YAAY,CAACC,OAAb,CAAqB,OAArB,CADqC,yEACJ,EADI,CAAvC;AAGAF,MAAAA,eAAe,GAAG,CAAC,GAAGG,gBAAJ,CAAlB;AACD,KALD,MAKO;AACLH,MAAAA,eAAe,GAAG,CAAC,GAAGP,OAAJ,CAAlB;AACAa,MAAAA,uBAAuB,CAACN,eAAD,CAAvB;AACD;;AAED,WAAOA,eAAP,CA/BiD,CAgCjD;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACG;;AAzCwB,C,CA0CzB;AAEF;;AACA,OAAO,eAAeR,mBAAf,GAA4D;AACjE,QAAMe,GAAG,GAAG,IAAIhB,aAAJ,EAAZ;AACA,SAAOgB,GAAG,CAACf,mBAAJ,EAAP;AACD;AACD,OAAO,SAASc,uBAAT,CAAiCE,KAAjC,EAAsD;AAC3DP,EAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BL,IAAI,CAACM,SAAL,CAAeF,KAAf,CAA9B;AACD","sourcesContent":["export interface CreditCard {\n  id: string;\n  cardNumber: string;\n  cardHolder: string;\n  cardMonth: string;\n  cardYear: string;\n  cardCvv: string;\n}\nexport interface AddEditCard extends CreditCard {\n  isCardFlipped: boolean;\n}\n\n//Data Layer\nexport class CreditCardAPI {\n  async fetchCreditCardList(): Promise<CreditCard[]> {\n    const apiData: CreditCard[] = [\n      {\n        id: 'ff646567-484e-4eb7-961f-977f7c728eb9',\n        cardNumber: '1111111111111111',\n        cardHolder: 'Hassan Saeed',\n        cardMonth: '01',\n        cardYear: '2023',\n        cardCvv: '1111',\n      },\n      {\n        id: 'b8262cc8-6506-46f2-925a-819729b224ec',\n        cardNumber: '2222222222222222',\n        cardHolder: 'John Doe',\n        cardMonth: '02',\n        cardYear: '2024',\n        cardCvv: '2222',\n      },\n    ];\n    let creditCardsList: CreditCard[] = [];\n    //first check local storage if local storage is empty then add api mock data as seed\n    if (localStorage.getItem('cards')) {\n      const localStorageData: CreditCard[] = JSON.parse(\n        localStorage.getItem('cards') ?? '',\n      );\n      creditCardsList = [...localStorageData];\n    } else {\n      creditCardsList = [...apiData];\n      updateLocalStorageCards(creditCardsList);\n    }\n\n    return creditCardsList;\n    //TODO:integrate API module when got API from backend team :)\n    /*\n    private readonly api = new Api();//it will have all Restful verbs functions\n    return axios.get(`ENDPOINT_GOES_HERE`)\n    .then((res: { data: any; }) => {\n      return res.data;\n    });\n    */\n  }\n} //CreditCardAPI Class End\n\n//Business Layer\nexport async function fetchCreditCardList(): Promise<CreditCard[]> {\n  const api = new CreditCardAPI();\n  return api.fetchCreditCardList();\n}\nexport function updateLocalStorageCards(cards: CreditCard[]) {\n  localStorage.setItem('cards', JSON.stringify(cards));\n}\n"]},"metadata":{},"sourceType":"module"}