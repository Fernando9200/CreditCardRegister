{"ast":null,"code":"var _jsxFileName = \"/home/fernando/credit-card-register/src/CardManager/EditCard/EditCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Card from \"../../components/Card\";\nimport CardForm from \"../../components/CardForm\";\nimport { fetchCreditCardList, updateLocalStorageCards } from \"../CreditCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  id: \"\",\n  cardNumber: \"\",\n  cardHolder: \"\",\n  cardMonth: \"\",\n  cardYear: \"\",\n  cardCvv: \"\"\n};\nexport default function EditCard() {\n  _s();\n\n  const {\n    id: parmId\n  } = useParams();\n  const navigate = useNavigate();\n  const [state, setState] = useState(initialState);\n  const [cardsData, setCardsData] = useState([]);\n  const [isCardFlipped, setIsCardFlipped] = useState(false); // async function fetchData() {\n  //   const cards: CreditCard[] = await fetchCreditCardList();\n  //   setCardsData(cards);\n  //   if (cards && cards.length > 0) {\n  //     const selectedCard = cards.find((card) => card.id === parmId);\n  //     setState(selectedCard ?? initialState);\n  //   }\n  // }\n\n  useEffect(() => {\n    async function fetchData() {\n      const cards = await fetchCreditCardList();\n      setCardsData(cards);\n\n      if (cards && cards.length > 0) {\n        const selectedCard = cards.find(card => card.id === parmId);\n        setState(selectedCard !== null && selectedCard !== void 0 ? selectedCard : initialState);\n      }\n    }\n\n    fetchData();\n  }, [parmId]);\n  const updateStateValues = useCallback((keyName, value) => {\n    setState({ ...state,\n      [keyName]: value || \"\"\n    });\n  }, [state]);\n\n  function handleSubmitAction() {\n    try {\n      var _cards$find;\n\n      const cards = cardsData;\n      const selectedCard = (_cards$find = cards.find(card => card.id === parmId)) !== null && _cards$find !== void 0 ? _cards$find : initialState;\n      const selectedCardIndex = cards.indexOf(selectedCard);\n      cards[selectedCardIndex] = state;\n      updateLocalStorageCards(cards);\n      navigate(\"/\");\n    } catch (error) {\n      alert(error);\n      console.log(error);\n    } finally {//release resources or stop loader\n    }\n  }\n\n  function handleDeleteAction() {\n    try {\n      var _cards$find2;\n\n      if (window.confirm(\"Are you sure you want to delete this card?\") === false) {\n        return;\n      }\n\n      const cards = cardsData;\n      const selectedCard = (_cards$find2 = cards.find(card => card.id === parmId)) !== null && _cards$find2 !== void 0 ? _cards$find2 : initialState;\n      const selectedCardIndex = cards.indexOf(selectedCard);\n      cards.splice(selectedCardIndex, 1);\n      updateLocalStorageCards(cards);\n      navigate(\"/\");\n    } catch (error) {\n      alert(error);\n      console.log(error);\n    } finally {//release resources or stop loader\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-card-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: /*#__PURE__*/_jsxDEV(CardForm, {\n          selectedCreditCard: state,\n          onUpdateState: updateStateValues,\n          setIsCardFlipped: setIsCardFlipped,\n          handleSubmitAction: handleSubmitAction,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            cardNumber: state.cardNumber,\n            cardHolder: state.cardHolder,\n            cardMonth: state.cardMonth,\n            cardYear: state.cardYear,\n            cardCvv: state.cardCvv,\n            isCardFlipped: isCardFlipped\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: 3,\n          className: \"\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-grid gap-1 delete-card\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"link\",\n              size: \"lg\",\n              onClick: handleDeleteAction,\n              children: \"Delete Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditCard, \"abAeQ2UZ2/PNBhz8InMr68UO9sc=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["/home/fernando/credit-card-register/src/CardManager/EditCard/EditCard.tsx"],"names":["React","Fragment","useCallback","useEffect","useState","Button","Col","Container","Row","useNavigate","useParams","Card","CardForm","fetchCreditCardList","updateLocalStorageCards","initialState","id","cardNumber","cardHolder","cardMonth","cardYear","cardCvv","EditCard","parmId","navigate","state","setState","cardsData","setCardsData","isCardFlipped","setIsCardFlipped","fetchData","cards","length","selectedCard","find","card","updateStateValues","keyName","value","handleSubmitAction","selectedCardIndex","indexOf","error","alert","console","log","handleDeleteAction","window","confirm","splice"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Card from \"../../components/Card\";\nimport CardForm from \"../../components/CardForm\";\nimport {\n  CreditCard,\n  fetchCreditCardList,\n  updateLocalStorageCards,\n} from \"../CreditCard\";\n\nconst initialState: CreditCard = {\n  id: \"\",\n  cardNumber: \"\",\n  cardHolder: \"\",\n  cardMonth: \"\",\n  cardYear: \"\",\n  cardCvv: \"\",\n};\n\nexport default function EditCard() {\n  const { id: parmId } = useParams();\n  const navigate = useNavigate();\n  const [state, setState] = useState<CreditCard>(initialState);\n  const [cardsData, setCardsData] = useState<CreditCard[]>([]);\n  const [isCardFlipped, setIsCardFlipped] = useState(false);\n\n  // async function fetchData() {\n  //   const cards: CreditCard[] = await fetchCreditCardList();\n  //   setCardsData(cards);\n  //   if (cards && cards.length > 0) {\n  //     const selectedCard = cards.find((card) => card.id === parmId);\n  //     setState(selectedCard ?? initialState);\n  //   }\n  // }\n\n  useEffect(() => {\n    async function fetchData() {\n      const cards: CreditCard[] = await fetchCreditCardList();\n      setCardsData(cards);\n      if (cards && cards.length > 0) {\n        const selectedCard = cards.find((card) => card.id === parmId);\n        setState(selectedCard ?? initialState);\n      }\n    }\n    fetchData();\n  }, [parmId]);\n\n  const updateStateValues = useCallback(\n    (keyName, value) => {\n      setState({\n        ...state,\n        [keyName]: value || \"\",\n      });\n    },\n    [state]\n  );\n\n  function handleSubmitAction() {\n    try {\n      const cards: CreditCard[] = cardsData;\n      const selectedCard: CreditCard =\n        cards.find((card) => card.id === parmId) ?? initialState;\n      const selectedCardIndex = cards.indexOf(selectedCard);\n      cards[selectedCardIndex] = state;\n      updateLocalStorageCards(cards);\n      navigate(\"/\");\n    } catch (error: any) {\n      alert(error);\n      console.log(error);\n    } finally {\n      //release resources or stop loader\n    }\n  }\n\n  function handleDeleteAction() {\n    try {\n      if (\n        window.confirm(\"Are you sure you want to delete this card?\") === false\n      ) {\n        return;\n      }\n\n      const cards: CreditCard[] = cardsData;\n      const selectedCard: CreditCard =\n        cards.find((card) => card.id === parmId) ?? initialState;\n      const selectedCardIndex = cards.indexOf(selectedCard);\n      cards.splice(selectedCardIndex, 1);\n      updateLocalStorageCards(cards);\n      navigate(\"/\");\n    } catch (error: any) {\n      alert(error);\n      console.log(error);\n    } finally {\n      //release resources or stop loader\n    }\n  }\n\n  return (\n    <Fragment>\n      <div className=\"add-card-content\">\n        <div className=\"wrapper\">\n          <CardForm\n            selectedCreditCard={state}\n            onUpdateState={updateStateValues}\n            setIsCardFlipped={setIsCardFlipped}\n            handleSubmitAction={handleSubmitAction}\n          >\n            <Card\n              cardNumber={state.cardNumber}\n              cardHolder={state.cardHolder}\n              cardMonth={state.cardMonth}\n              cardYear={state.cardYear}\n              cardCvv={state.cardCvv}\n              isCardFlipped={isCardFlipped}\n            ></Card>\n          </CardForm>\n        </div>\n      </div>\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col md={3} className=\"\">\n            <div className=\"d-grid gap-1 delete-card\">\n              <Button variant=\"link\" size=\"lg\" onClick={handleDeleteAction}>\n                Delete Card\n              </Button>{\" \"}\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}